Machine code:
conf_func:
	malloc AX <- 2
	move (AX + 1) <- R[27]
	move (AX + 0) <- R[28]
	return
when_error:
	exception
_Start_CSE_321_HW7_:
1:
	malloc R[29] <- 2
	move (R[29] + 0) <- &2
	push R[29]
	jump &26
2:
	push R[27]
3:
pat_var5:
6:
	malloc R[29] <- 2
	move (R[29] + 0) <- &7
	push R[29]
	malloc (R[29] + 1) <- 1
	move R[28] <- *(R[29] + 1)
	move (R[28] + 0) <- *(BP + 0)
	jump &24
7:
	push R[27]
	push *(R[28] + 0)
8:
pat_var10:
11:
	malloc R[29] <- 2
	move (R[29] + 0) <- &12
	push R[29]
	malloc (R[29] + 1) <- 2
	move R[28] <- *(R[29] + 1)
	move (R[28] + 0) <- *(BP + 0)
	move (R[28] + 1) <- *(BP + 1)
	jump &22
12:
	push R[27]
	push *(R[28] + 0)
	push *(R[28] + 1)
13:
pat_var15:
16:
17:
	move AX <- *(BP + 1)
18:
19:
	move AX <- *(BP + 2)
20:
	move AX <- *(BP + 0)
	move R[29] <- *(BP + 2)
	move R[28] <- *(R[29] + 1)
	move R[27] <- *(BP + 0)
	call *(R[29] + 0)
	push AX
	move R[29] <- *(BP + 1)
	move R[28] <- *(R[29] + 1)
	move R[27] <- *(BP + 3)
	call *(R[29] + 0)
	push AX
	pop R[11]
	pop R[11]
	pop R[11]
	pop R[11]
	pop R[11]
	return
22:
	move AX <- *(BP + 2)
	pop R[11]
	pop R[11]
	pop R[11]
	return
24:
	move AX <- *(BP + 1)
	pop R[11]
	pop R[11]
	return
26:
	move AX <- *(BP + 0)
	halt AX


Execution begins at 7:
7   _Start_CSE_321_HW7_:
8   1:
9   	malloc R[29] <- 2
10   	move (R[29] + 0) <- &2
11   	push R[29]
12   	jump &26
80   26:
81   	move AX <- *(BP + 0)
82   	halt AX

Stack(1) = [0] = &Heap_0/

&Heap_0 = [0] = &2 [1] = 0

Execution statistics
	code size = 60
	max stack = 0
	max heap = 2
	instructions executed = 6
	memory read = 1
	memory write = 2
	register read = 4
	register write = 3
Total time cost = 103
Total memory cost = 62

Normal termination
	Result = HEAP_&0: [|LABEL_2||0|]
